apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'maven-publish'
apply plugin: "org.sonarqube"

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion


        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility "$rootProject.ext.java_version"
        targetCompatibility "$rootProject.ext.java_version"
    }

}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    // api group: 'io.netty', name: 'netty-all', version: "$rootProject.ext.nettyVersion"
//    api group: 'io.netty', name: 'netty-handler', version: "$rootProject.ext.nettyVersion"
    // https://mvnrepository.com/artifact/io.netty/netty-codec-http
    api "io.netty:netty-codec-http:$rootProject.ext.nettyVersion"

    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.ext.coroutines_version"
    api project(':log-sdk')
    api project(':lib-bytes')
    api project(':lib-network')

    // No need to use this library when adding pipeline however we indeed need its library.
    // So what's the magic?
    // https://mvnrepository.com/artifact/com.jcraft/jzlib
    api group: 'com.jcraft', name: 'jzlib', version: "$jzlibVersion"
}

afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                from components.release
                groupId = 'com.github.yhz61010.LeoAndroidBaseUtilProject-Kotlin'
                artifactId = 'basenetty-sdk'
                version = "$rootProject.ext.leoVersion"
            }
        }
    }
}